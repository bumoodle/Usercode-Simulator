#!/usr/bin/python2

import Assembly

opcode_tests = \
        [
            ("ADC #$83", 	[0xA9, 0x83]),
			("ADC $84", 	[0xB9, 0x84]),
			("ADC $0485", 	[0xC9, 0x04, 0X85]),
			("ADC $1185,X",	[0xD9, 0x11, 0X85]),
			("ADC $86,X", 	[0xE9, 0x86]),
			("ADC ,X", 		[0xF9]),
			("ADC $1112,SP",[0x9E, 0xD9, 0x11, 0x12]),
			("ADC $12,SP", 	[0x9E, 0xE9, 0X12]),

			("ADD #$45", 	[0xAB, 0x45]),
			("ADD $33", 	[0xBB, 0x33]),
			("ADD $1245", 	[0xCB, 0x12, 0x45]),
			("ADD $1346,X", [0xDB, 0x13, 0X46]),
			("ADD $5,X", 	[0xEB, 0x05]),
			("ADD ,X", 		[0xFB]),
			("ADD $1234,SP",[0x9E, 0xDB, 0x12, 0x34]),
			("ADD $45,SP", 	[0x9E, 0xEB, 0x45]),

			("AIS #$55", 	[0xA7, 0x55]),

			("AIX #$44", 	[0xAF, 0x44]),

			("AND #1", 		[0xA4, 0x01]),
			("AND 1", 		[0xB4, 0x01]),
			("AND $0102", 	[0xC4, 0x01, 0x02]),
			("AND $0102,X",	[0xD4, 0x01, 0x02]),
			("AND 1,x", 	[0xE4, 0x01]),
			("AND ,X", 		[0xF4]),
			("AND $0102,SP",[0x9E, 0xD4, 0x01, 0x02]),
			("AND 1,SP", 	[0x9E, 0xE4, 0x01]),

			("ASL 4", 		[0x38, 0x04]),
			("ASLA", 		[0x48]),
			("ASLX", 		[0x58]),
			("ASL 1,X", 	[0x68, 0x01]),
			("ASl ,X", 		[0x78]),
			("ASL 1,SP", 	[0x9E, 0x68, 0x01]),

			("ASR 4", 		[0x37, 0x04]),
			("ASRA", 		[0x47]),
			("ASRX", 		[0x57]),
			("ASR 1,X", 	[0x67, 0x01]),
			("ASR ,X", 		[0x77]),
			("ASR 1,SP", 	[0x9E, 0x67, 0x01]),

			("BCC 5", 		[0x24, 0x05]),

			("BCLR 0,$15", 	[0x11, 0x15]),
			("BCLR 1,$15", 	[0x13, 0x15]),
			("BCLR 2,$15", 	[0x15, 0x15]),
			("BCLR 3,$15", 	[0x17, 0x15]),
			("BCLR 4,$15", 	[0x19, 0x15]),
			("BCLR 5,$15", 	[0x1B, 0x15]),
			("BCLR 6,$15", 	[0x1D, 0x15]),
			("BCLR 7,$15", 	[0x1F, 0x15]),

			("BCS 5", 		[0x25, 0x05]),
			("BEQ 5", 		[0x27, 0x05]),
			("BGE 5", 		[0x90, 0x05]),

			#("BGND", 		[0x82]),

			("BGT 5", 		[0x92, 0x05]),
			("BHCC 5", 		[0x28, 0x05]),
			("BHCS 5", 		[0x29, 0x05]),
			("BHI 5", 		[0x22, 0x05]),
			("BHS 5", 		[0x24, 0x05]),
			("BIH 5", 		[0x2F, 0x05]),
			("BIL 5", 		[0x2E, 0x05]),

			("BIT #5", 		[0xA5, 0x05]),
			("BIT 5", 		[0xB5, 0x05]),
			("BIT $0405", 	[0xC5, 0X04, 0x05]),
			("BIT $0405,X", [0xD5, 0X04, 0x05]),
			("BIT 5,X", 	[0xE5, 0x05]),
			("BIT ,X", 		[0xF5]),
			("BIT $0405,SP",[0x9E, 0xD5, 0X04, 0x05]),
			("BIT 5,SP", 	[0x9E, 0xE5, 0x05]),

			("BLE 5", 		[0x93, 0x05]),
			("BLO 5", 		[0x25, 0x05]),
			("BLS 5", 		[0x23, 0x05]),
			("BLT 5", 		[0x91, 0x05]),
			("BMC 5", 		[0x2C, 0x05]),
			("BMI 5", 		[0x2B, 0x05]),
			("BMS 5", 		[0x2D, 0x05]),
			("BNE 5", 		[0x26, 0x05]),
			("BPL 5", 		[0x2A, 0x05]),
			("BRA 5", 		[0x20, 0x05]),

			("BRCLR 0,5,7", [0x01, 0x05, 0x07]),
			("BRCLR 1,5,7", [0x03, 0x05, 0x07]),
			("BRCLR 2,5,7", [0x05, 0x05, 0x07]),
			("BRCLR 3,5,7", [0x07, 0x05, 0x07]),
			("BRCLR 4,5,7", [0x09, 0x05, 0x07]),
			("BRCLR 5,5,7", [0x0B, 0x05, 0x07]),
			("BRCLR 6,5,7", [0x0D, 0x05, 0x07]),
			("BRCLR 7,5,7", [0x0F, 0x05, 0x07]),

			("BRN 5", 		[0x21, 0x05]),

			("BRSET 0,5,7", [0x00, 0x05, 0x07]),
			("BRSET 1,5,7", [0x02, 0x05, 0x07]),
			("BRSET 2,5,7", [0x04, 0x05, 0x07]),
			("BRSET 3,5,7", [0x06, 0x05, 0x07]),
			("BRSET 4,5,7", [0x08, 0x05, 0x07]),
			("BRSET 5,5,7", [0x0A, 0x05, 0x07]),
			("BRSET 6,5,7", [0x0C, 0x05, 0x07]),
			("BRSET 7,5,7", [0x0E, 0x05, 0x07]),

			("BSET 0,$15", 	[0x10, 0x15]),
			("BSET 1,$15", 	[0x12, 0x15]),
			("BSET 2,$15", 	[0x14, 0x15]),
			("BSET 3,$15", 	[0x16, 0x15]),
			("BSET 4,$15", 	[0x18, 0x15]),
			("BSET 5,$15", 	[0x1A, 0x15]),
			("BSET 6,$15", 	[0x1C, 0x15]),
			("BSET 7,$15", 	[0x1E, 0x15]),

			("BSR 5", 		[0xAD, 0x05]),

			("CBEQ 5,6", 	[0x31, 0x05, 0x06]),
			("CBEQA #5,6", 	[0x41, 0x05, 0x06]),
			("CBEQX #5,6", 	[0x51, 0x05, 0x06]),
			("CBEQ 5,x+,6",	[0x61, 0x05, 0x06]),
			("CBEQ ,x+,6", 	[0x71, 0x06]),
			("CBEQ 5,SP,6",	[0x9E, 0x61, 0x05, 0x06]),

			("CLC", 		[0x98]),
			("CLI", 		[0x9A]),

			("CLR 3", 		[0x3F, 0x03]),
			("CLRA", 		[0x4F]),
			("CLRX", 		[0x5F]),
			("CLRH", 		[0x8C]),
			("CLR 3,X", 	[0x6F, 0x03]),
			("CLR ,X", 		[0x7F]),
			("CLR 3,SP", 	[0x9E, 0x6F, 0x03]),

			("CMP #$45", 	[0xA1, 0x45]),
			("CMP $33", 	[0xB1, 0x33]),
			("CMP $1245", 	[0xC1, 0x12, 0x45]),
			("CMP $1346,X", [0xD1, 0x13, 0X46]),
			("CMP $5,X", 	[0xE1, 0x05]),
			("CMP ,X", 		[0xF1]),
			("CMP $1234,SP",[0x9E, 0xD1, 0x12, 0x34]),
			("CMP $45,SP", 	[0x9E, 0xE1, 0x45]),

			("COM 3", 		[0x33, 0x03]),
			("COMA", 		[0x43]),
			("COMX", 		[0x53]),
			("COM 3,X", 	[0x63, 0x03]),
			("COM ,X", 		[0x73]),
			("COM 3,SP", 	[0x9E, 0x63, 0x03]),

			("CPHX $1234", 	[0x3E, 0x12, 0x34]),
			("CPHX #$1234",	[0x65, 0x12, 0x34]),
			("CPHX 4", 		[0x75, 0x04]),
			("CPHX 4,SP", 	[0x9E, 0xF3, 0x04]),

			("CPX #$45", 	[0xA3, 0x45]),
			("CPX $33", 	[0xB3, 0x33]),
			("CPX $1245", 	[0xC3, 0x12, 0x45]),
			("CPX $1346,X", [0xD3, 0x13, 0X46]),
			("CPX 5,X", 	[0xE3, 0x05]),
			("CPX ,X", 		[0xF3]),
			("CPX $1234,SP",[0x9E, 0xD3, 0x12, 0x34]),
			("CPX $45,SP", 	[0x9E, 0xE3, 0x45]),

			("DAA", 		[0x72]),

			("DBNZ 3,5", 	[0x3B, 0x03, 0x05]),
			("DBNZA 5", 	[0x4B, 0x05]),
			("DBNZX 5", 	[0x5B, 0x05]),
			("DBNZ 3,X,5", 	[0x6B, 0x03, 0x05]),
			("DBNZ ,X,5", 	[0x7B, 0x05]),
			("DBNZ 3,SP,5",	[0x9E, 0x6B, 0x03, 0x05]),

			("DEC 3", 		[0x3A, 0x03]),
			("DECA", 		[0x4A]),
			("DECX", 		[0x5A]),
			("DEC 3,X", 	[0x6A, 0x03]),
			("DEC ,X", 		[0x7A]),
			("DEC 3,SP", 	[0x9E, 0x6A, 0x03]),

			("DIV", 		[0x52]),

			("EOR #$45", 	[0xA8, 0x45]),
			("EOR $33", 	[0xB8, 0x33]),
			("EOR $1245", 	[0xC8, 0x12, 0x45]),
			("EOR $1346,X", [0xD8, 0x13, 0X46]),
			("EOR 5,X", 	[0xE8, 0x05]),
			("EOR ,X", 		[0xF8]),
			("EOR $1234,SP",[0x9E, 0xD8, 0x12, 0x34]),
			("EOR $45,SP", 	[0x9E, 0xE8, 0x45]),

			("INC 3", 		[0x3C, 0x03]),
			("INCA", 		[0x4C]),
			("INCX", 		[0x5C]),
			("INC 3,X", 	[0x6C, 0x03]),
			("INC ,X", 		[0x7C]),
			("INC 3,SP", 	[0x9E, 0x6C, 0x03]),

			("JMP $10", 	[0xBC, 0x10]),
			("JMP $1234", 	[0xCC, 0x12, 0x34]),
			("JMP $1234,X", [0xDC, 0x12, 0x34]),
			("JMP $10,X", 	[0xEC, 0x10]),
			("JMP ,X", 		[0xFC]),

			("JSR $10", 	[0xBD, 0x10]),
			("JSR $1234", 	[0xCD, 0x12, 0x34]),
			("JSR $1234,X", [0xDD, 0x12, 0x34]),
			("JSR $10,X", 	[0xED, 0x10]),
			("JSR ,X", 		[0xFD]),

			("LDA #5", 		[0xA6, 0x05]),
			("LDA 5", 		[0xB6, 0x05]),
			("LDA $1234",	[0xC6, 0x12, 0x34]),
			("LDA $1234,X",	[0xD6, 0x12, 0x34]),
			("LDA 5,X",		[0xE6, 0x05]),
			("LDA ,X", 		[0xF6]),
			("LDA $1234,SP",[0x9E, 0xD6, 0x12, 0x34]),
			("LDA 5,SP", 	[0x9E, 0xE6, 0x05]),

			("LDHX #$1234", [0x45, 0x12, 0x34]),
			("LDHX 5", 		[0x55, 0x05]),
			("LDHX $1234",	[0x32, 0x12, 0x34]),
			("LDHX ,X", 	[0x9E, 0xAE]),
			("LDHX $1234,X",[0x9E, 0xBE, 0x12, 0x34]),
			("LDHX 5,X",	[0x9E, 0xCE, 0x05]),
			("LDHX 5,SP", 	[0x9E, 0xFE, 0x05]),

			("LDX #5", 		[0xAE, 0x05]),
			("LDX 5", 		[0xBE, 0x05]),
			("LDX $1234",	[0xCE, 0x12, 0x34]),
			("LDX $1234,X",	[0xDE, 0x12, 0x34]),
			("LDX 5,X",		[0xEE, 0x05]),
			("LDX ,X", 		[0xFE]),
			("LDX $1234,SP",[0x9E, 0xDE, 0x12, 0x34]),
			("LDX 5,SP", 	[0x9E, 0xEE, 0x05]),

			("LSL 3", 		[0x38, 0x03]),
			("LSLA", 		[0x48]),
			("LSLX", 		[0x58]),
			("LSL 3,X", 	[0x68, 0x03]),
			("LSL ,X", 		[0x78]),
			("LSL 3,SP", 	[0x9E, 0x68, 0x03]),

			("LSR 3", 		[0x34, 0x03]),
			("LSRA", 		[0x44]),
			("LSRX", 		[0x54]),
			("LSR 3,X", 	[0x64, 0x03]),
			("LSR ,X", 		[0x74]),
			("LSR 3,SP", 	[0x9E, 0x64, 0x03]),

			("MOV 4,5",		[0x4E, 0x04, 0x05]),
			("MOV 4,X+",	[0x5E, 0x04]),
			("MOV #5,4",	[0x6E, 0x05, 0x04]),
			("MOV ,X+,5",	[0X7E, 0X05]),

			("MUL", 		[0X42]),

			("NEG 3", 		[0x30, 0x03]),
			("NEGA", 		[0x40]),
			("NEGX", 		[0x50]),
			("NEG 3,X", 	[0x60, 0x03]),
			("NEG ,X", 		[0x70]),
			("NEG 3,SP", 	[0x9E, 0x60, 0x03]),

			("NOP", 		[0x9D]),

			("NSA", 		[0x62]),

			("ORA #5", 		[0xAA, 0x05]),
			("ORA 5", 		[0xBA, 0x05]),
			("ORA $1234",	[0xCA, 0x12, 0x34]),
			("ORA $1234,X",	[0xDA, 0x12, 0x34]),
			("ORA 5,X",		[0xEA, 0x05]),
			("ORA ,X", 		[0xFA]),
			("ORA $1234,SP",[0x9E, 0xDA, 0x12, 0x34]),
			("ORA 5,SP", 	[0x9E, 0xEA, 0x05]),

			("PSHA",		[0x87]),
			("PSHH",		[0x8B]),
			("PSHX",		[0x89]),
			("PULA",		[0x86]),
			("PULH",		[0x8A]),
			("PULX",		[0x88]),

			("ROL 3", 		[0x39, 0x03]),
			("ROLA", 		[0x49]),
			("ROLX", 		[0x59]),
			("ROL 3,X", 	[0x69, 0x03]),
			("ROL ,X", 		[0x79]),
			("ROL 3,SP", 	[0x9E, 0x69, 0x03]),

			("ROR 3", 		[0x36, 0x03]),
			("RORA", 		[0x46]),
			("RORX", 		[0x56]),
			("ROR 3,X", 	[0x66, 0x03]),
			("ROR ,X", 		[0x76]),
			("ROR 3,SP", 	[0x9E, 0x66, 0x03]),

			("RSP",			[0x9C]),

			("RTI",			[0x80]),

			("RTS", 		[0x81]),

			("SBC #5", 		[0xA2, 0x05]),
			("SBC 5", 		[0xB2, 0x05]),
			("SBC $1234",	[0xC2, 0x12, 0x34]),
			("SBC $1234,X",	[0xD2, 0x12, 0x34]),
			("SBC 5,X",		[0xE2, 0x05]),
			("SBC ,X", 		[0xF2]),
			("SBC $1234,SP",[0x9E, 0xD2, 0x12, 0x34]),
			("SBC 5,SP", 	[0x9E, 0xE2, 0x05]),

			("SEC", 		[0x99]),

			("SEI", 		[0x9B]),

			("STA 5", 		[0xB7, 0x05]),
			("STA $1234",	[0xC7, 0x12, 0x34]),
			("STA $1234,X",	[0xD7, 0x12, 0x34]),
			("STA 5,X",		[0xE7, 0x05]),
			("STA ,X", 		[0xF7]),
			("STA $1234,SP",[0x9E, 0xD7, 0x12, 0x34]),
			("STA 5,SP", 	[0x9E, 0xE7, 0x05]),

			("STHX 5", 		[0x35, 0x05]),
			("STHX $1234", 	[0x96, 0x12, 0x34]),
			("STHX 5,SP", 	[0x9E, 0xFF, 0x05]),

			("STOP", 		[0x8E]),

			("STX $1234",	[0xCF, 0x12, 0x34]),
			("STX $1234,X",	[0xDF, 0x12, 0x34]),
			("STX 5,X",		[0xEF, 0x05]),
			("STX ,X", 		[0xFF]),
			("STX $1234,SP",[0x9E, 0xDF, 0x12, 0x34]),
			("STX 5,SP", 	[0x9E, 0xEF, 0x05]),

			("SUB #5", 		[0xA0, 0x05]),
			("SUB 5", 		[0xB0, 0x05]),
			("SUB $1234",	[0xC0, 0x12, 0x34]),
			("SUB $1234,X",	[0xD0, 0x12, 0x34]),
			("SUB 5,X",		[0xE0, 0x05]),
			("SUB ,X", 		[0xF0]),
			("SUB $1234,SP",[0x9E, 0xD0, 0x12, 0x34]),
			("SUB 5,SP", 	[0x9E, 0xE0, 0x05]),

			("SWI", 		[0x83]),

			("TAP", 		[0x84]),
			("TAX", 		[0x97]),
			("TPA", 		[0x85]),

			("TST 3", 		[0x3D, 0x03]),
			("TSTA", 		[0x4D]),
			("TSTX", 		[0x5D]),
			("TST 3,X", 	[0x6D, 0x03]),
			("TST ,X", 		[0x7D]),
			("TST 3,SP", 	[0x9E, 0x6D, 0x03]),

			("TSX", 		[0x95]),
			("TXA", 		[0x9F]),
			("TXS", 		[0x94]),
			("WAIT", 		[0x8F]),


            ('dc.b 85, 83, $21, %1111, "hi", \'h\', \'i\', 0', [85, 83, 0x21, 0x0F, 0x68, 0x69, 0x68, 0x69, 0])

        ]

for asm_code, machine_codes in opcode_tests:

    try:

        #parse the asm code into tokens
        tokens = Assembly.Tokens.tokenize(asm_code)

        if tokens is None:
            continue

        #get the operation
        operation = Assembly.get_operation_by_mnemonic(tokens['mnemonic'])

        #and convert the operation into machine code
        produced = operation.assemble(tokens, {}, None)

        if produced != machine_codes:
            print "Assembly " + asm_code +  " did not produce the correct machine code. (Produced: " + repr(produced) + " rather than the correct " + repr(machine_codes) + ")"
            print "Tokens were", tokens, "\n"

    except Exception as e:
        print "An exception occurred when processing the following ASM: " + asm_code
        print "The exception was ", repr(e)
        print "Tokens were", tokens
        print ''
